#BlueJ class context
comment0.target=Mapa
comment0.text=\n\ Genera\ el\ mapa\ con\ habitaciones\ conectadas\ y\n\ objetos\ en\ ellas.\n\ \n\ Implementa\ el\ patron\ sigleton\ para\ evitar\n\ multiples\ instancias.\n
comment1.params=
comment1.target=Mapa()
comment1.text=\n\ El\ constructor\ es\ privado\ para\ que\ no\ se\ pueda\n\ instanciar\ por\ fuera.\n
comment10.params=h
comment10.target=void\ configCueva(Habitacion)
comment11.params=h
comment11.target=void\ configPueblo(Habitacion)
comment12.params=h
comment12.target=void\ configAlmacen(Habitacion)
comment2.params=
comment2.target=Mapa\ getInstance()
comment2.text=\n\ Este\ metodo\ devuelve\ el\ Mapa.\ \ Si\ no\ se\ encuentra\n\ instanciado,\ se\ lo\ crea.\n\ \n\ @return\ El\ mapa\ desde\ la\ posicion\ inicial.\n
comment3.params=
comment3.target=Habitacion\ getInicio()
comment4.params=
comment4.target=void\ generarHabitaciones()
comment4.text=\n\ Crea\ las\ habitaciones\ que\ conforman\ el\ mapa.\n
comment5.params=
comment5.target=void\ configurarConexiones()
comment5.text=\n\ Configura\ la\ salidas\ de\ cada\ habitacion.\n\ \n\ Se\ utiliza\ reflection\ para\ invocar\ los\ metodos\n\ en\ base\ al\ nombre\ de\ la\ habitacion.\n
comment6.params=h
comment6.target=void\ configCasa(Habitacion)
comment6.text=Los\ siguientes\ metodos\ configuran\ las\ habitaciones\ ***
comment7.params=h
comment7.target=void\ configCamino(Habitacion)
comment8.params=h
comment8.target=void\ configCruce(Habitacion)
comment9.params=h
comment9.target=void\ configLadera(Habitacion)
numComments=13
